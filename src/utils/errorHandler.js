// сѓесЃЕсЃ╝сѓ┐сѓцсЃЌсЂ«т«џуЙЕ
export const ERROR_TYPES = {
  NETWORK: 'NETWORK',
  VALIDATION: 'VALIDATION',
  AUTHENTICATION: 'AUTHENTICATION',
  AUTHORIZATION: 'AUTHORIZATION',
  NOT_FOUND: 'NOT_FOUND',
  CONFLICT: 'CONFLICT',
  SERVER: 'SERVER',
  UNKNOWN: 'UNKNOWN'
};

// SupabaseсѓесЃЕсЃ╝сѓ│сЃ╝сЃЅсЂІсѓЅсѓесЃЕсЃ╝сѓ┐сѓцсЃЌсЂИсЂ«сЃъсЃЃсЃћсЃ│сѓ░
const SUPABASE_ERROR_MAPPING = {
  // УфЇУе╝сѓесЃЕсЃ╝
  'invalid_credentials': ERROR_TYPES.AUTHENTICATION,
  'email_not_confirmed': ERROR_TYPES.AUTHENTICATION,
  'user_not_found': ERROR_TYPES.AUTHENTICATION,
  'too_many_requests': ERROR_TYPES.AUTHENTICATION,
  'signup_disabled': ERROR_TYPES.AUTHENTICATION,
  
  // УфЇтЈ»сѓесЃЕсЃ╝
  'insufficient_permissions': ERROR_TYPES.AUTHORIZATION,
  'access_denied': ERROR_TYPES.AUTHORIZATION,
  
  // сЃЄсЃ╝сѓ┐сЃЎсЃ╝сѓ╣сѓесЃЕсЃ╝
  'PGRST116': ERROR_TYPES.NOT_FOUND, // сЃгсѓ│сЃ╝сЃЅсЂїУдІсЂцсЂІсѓЅсЂфсЂё
  '23505': ERROR_TYPES.CONFLICT,     // СИђТёЈтѕХу┤ёжЂЋтЈЇ
  '23503': ERROR_TYPES.VALIDATION,   // тцќжЃесѓГсЃ╝тѕХу┤ёжЂЋтЈЇ
  '23514': ERROR_TYPES.VALIDATION,   // сЃЂсѓДсЃЃсѓ»тѕХу┤ёжЂЋтЈЇ
  '42P01': ERROR_TYPES.SERVER,       // сЃєсЃ╝сЃќсЃФсЂїтГўтюесЂЌсЂфсЂё
  
  // сЃЇсЃЃсЃѕсЃ»сЃ╝сѓ»сѓесЃЕсЃ╝
  'fetch_error': ERROR_TYPES.NETWORK,
  'timeout': ERROR_TYPES.NETWORK
};

// сѓесЃЕсЃ╝сѓ┐сѓцсЃЌтѕЦсЂ«сЃдсЃ╝сѓХсЃ╝сЃЋсЃгсЃ│сЃЅсЃфсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИ
const ERROR_MESSAGES = {
  [ERROR_TYPES.NETWORK]: {
    title: 'сЃЇсЃЃсЃѕсЃ»сЃ╝сѓ»сѓесЃЕсЃ╝',
    message: 'сѓцсЃ│сѓ┐сЃ╝сЃЇсЃЃсЃѕТјЦуХџсѓњуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂёсђѓ',
    action: 'тєЇУЕдУАїсЂЌсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.VALIDATION]: {
    title: 'тЁЦтіЏсѓесЃЕсЃ╝',
    message: 'тЁЦтіЏтєЁт«╣сѓњуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂёсђѓ',
    action: 'ТГБсЂЌсЂётђцсѓњтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.AUTHENTICATION]: {
    title: 'УфЇУе╝сѓесЃЕсЃ╝',
    message: 'сЃГсѓ░сѓцсЃ│сЂїт┐ЁУдЂсЂДсЂЎсђѓ',
    action: 'тєЇт║дсЃГсѓ░сѓцсЃ│сЂЌсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.AUTHORIZATION]: {
    title: 'ТеЕжЎљсѓесЃЕсЃ╝',
    message: 'сЂЊсЂ«ТЊЇСйюсѓњт«ЪУАїсЂЎсѓІТеЕжЎљсЂїсЂѓсѓісЂЙсЂЏсѓЊсђѓ',
    action: 'у«АуљєУђЁсЂФтЋЈсЂётљѕсѓЈсЂЏсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.NOT_FOUND]: {
    title: 'сЃЄсЃ╝сѓ┐сЂїУдІсЂцсЂІсѓісЂЙсЂЏсѓЊ',
    message: 'ТїЄт«џсЂЋсѓїсЂЪсЃЄсЃ╝сѓ┐сЂїтГўтюесЂЌсЂЙсЂЏсѓЊсђѓ',
    action: 'тѕЦсЂ«сЃЄсЃ╝сѓ┐сѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.CONFLICT]: {
    title: 'сЃЄсЃ╝сѓ┐сЂ«уФХтљѕ',
    message: 'тљїсЂўсЃЄсЃ╝сѓ┐сЂїТЌбсЂФтГўтюесЂЌсЂЙсЂЎсђѓ',
    action: 'тѕЦсЂ«тђцсѓњСй┐ућесЂЌсЂдсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.SERVER]: {
    title: 'сѓхсЃ╝сЃљсЃ╝сѓесЃЕсЃ╝',
    message: 'сѓхсЃ╝сЃљсЃ╝сЂДтЋЈжАїсЂїуЎ║ућЪсЂЌсЂЙсЂЌсЂЪсђѓ',
    action: 'сЂЌсЂ░сѓЅсЂЈТЎѓжќЊсѓњсЂісЂёсЂдтєЇт║дсЂіУЕдсЂЌсЂЈсЂасЂЋсЂё'
  },
  [ERROR_TYPES.UNKNOWN]: {
    title: 'С║ѕТюЪсЂЌсЂфсЂёсѓесЃЕсЃ╝',
    message: 'С║ѕТюЪсЂЌсЂфсЂёсѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЙсЂЌсЂЪсђѓ',
    action: 'сЃџсЃ╝сѓИсѓњтєЇУфГсЂ┐УЙ╝сЂ┐сЂЌсЂдсЂЈсЂасЂЋсЂё'
  }
};

// уЅ╣т«џсЂ«сѓесЃЕсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИсЂ«сЃъсЃЃсЃћсЃ│сѓ░
const SPECIFIC_ERROR_MESSAGES = {
  // УфЇУе╝жќбжђБ
  'Invalid login credentials': 'сЃАсЃ╝сЃФсѓбсЃЅсЃгсѓ╣сЂЙсЂЪсЂ»сЃЉсѓ╣сЃ»сЃ╝сЃЅсЂїжќЊжЂЋсЂБсЂдсЂёсЂЙсЂЎсђѓ',
  'Email not confirmed': 'сЃАсЃ╝сЃФсѓбсЃЅсЃгсѓ╣сЂїуб║УфЇсЂЋсѓїсЂдсЂёсЂЙсЂЏсѓЊсђѓуб║УфЇсЃАсЃ╝сЃФсѓњсЃЂсѓДсЃЃсѓ»сЂЌсЂдсЂЈсЂасЂЋсЂёсђѓ',
  'User already registered': 'сЂЊсЂ«сЃАсЃ╝сЃФсѓбсЃЅсЃгсѓ╣сЂ»ТЌбсЂФуЎ╗жї▓сЂЋсѓїсЂдсЂёсЂЙсЂЎсђѓ',
  'Password should be at least 6 characters': 'сЃЉсѓ╣сЃ»сЃ╝сЃЅсЂ»6ТќЄтГЌС╗ЦСИісЂДтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂёсђѓ',
  'Too many requests': 'сЃфсѓ»сѓесѓ╣сЃѕсЂїтцџсЂЎсЂјсЂЙсЂЎсђѓсЂЌсЂ░сѓЅсЂЈТЎѓжќЊсѓњсЂісЂёсЂдтєЇт║дсЂіУЕдсЂЌсЂЈсЂасЂЋсЂёсђѓ',
  
  // сЃЄсЃ╝сѓ┐сЃЎсЃ╝сѓ╣жќбжђБ
  'duplicate key value violates unique constraint': 'тљїсЂўсЃЄсЃ╝сѓ┐сЂїТЌбсЂФтГўтюесЂЌсЂЙсЂЎсђѓ',
  'violates foreign key constraint': 'жќбжђБсЂЎсѓІсЃЄсЃ╝сѓ┐сЂїтГўтюесЂЌсЂЙсЂЏсѓЊсђѓ',
  'violates check constraint': 'тЁЦтіЏтђцсЂїтѕХу┤ёсЂФжЂЋтЈЇсЂЌсЂдсЂёсЂЙсЂЎсђѓ'
};

/**
 * сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕсѓњУДБТъљсЂЌсЂдсѓесЃЕсЃ╝ТЃЁта▒сѓњУ┐ћсЂЎ
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @returns {Object} УДБТъљсЂЋсѓїсЂЪсѓесЃЕсЃ╝ТЃЁта▒
 */
export const parseError = (error) => {
  if (!error) {
    return {
      type: ERROR_TYPES.UNKNOWN,
      message: 'сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЙсЂЌсЂЪ',
      originalError: null
    };
  }

  // SupabaseсѓесЃЕсЃ╝сЂ«та┤тљѕ
  if (error.code || error.message) {
    const errorCode = error.code || error.message;
    const errorType = SUPABASE_ERROR_MAPPING[errorCode] || ERROR_TYPES.UNKNOWN;
    
    // уЅ╣т«џсЂ«сѓесЃЕсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИсЂїсЂѓсѓІта┤тљѕ
    const specificMessage = SPECIFIC_ERROR_MESSAGES[error.message];
    if (specificMessage) {
      return {
        type: errorType,
        message: specificMessage,
        originalError: error
      };
    }
    
    // СИђУѕгуџёсЂфсѓесЃЕсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИ
    const errorInfo = ERROR_MESSAGES[errorType];
    return {
      type: errorType,
      message: errorInfo.message,
      title: errorInfo.title,
      action: errorInfo.action,
      originalError: error
    };
  }

  // сЃЇсЃЃсЃѕсЃ»сЃ╝сѓ»сѓесЃЕсЃ╝сЂ«та┤тљѕ
  if (error.name === 'TypeError' && error.message.includes('fetch')) {
    return {
      type: ERROR_TYPES.NETWORK,
      message: ERROR_MESSAGES[ERROR_TYPES.NETWORK].message,
      title: ERROR_MESSAGES[ERROR_TYPES.NETWORK].title,
      action: ERROR_MESSAGES[ERROR_TYPES.NETWORK].action,
      originalError: error
    };
  }

  // сЂЮсЂ«С╗ќсЂ«сѓесЃЕсЃ╝
  return {
    type: ERROR_TYPES.UNKNOWN,
    message: error.message || 'сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЙсЂЌсЂЪ',
    title: ERROR_MESSAGES[ERROR_TYPES.UNKNOWN].title,
    action: ERROR_MESSAGES[ERROR_TYPES.UNKNOWN].action,
    originalError: error
  };
};

/**
 * сѓесЃЕсЃ╝сѓњсЃГсЃ╝сѓФсЃФсѓ╣сЃѕсЃгсЃ╝сѓИсЂФС┐ЮтГў
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @param {string} context - сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЪсѓ│сЃ│сЃєсѓГсѓ╣сЃѕ
 */
const saveErrorToLocalStorage = (error, context = '') => {
  try {
    const errorLog = JSON.parse(localStorage.getItem('edore_error_log') || '[]');
    const parsedError = parseError(error);
    
    const errorEntry = {
      timestamp: new Date().toISOString(),
      message: parsedError.message,
      context,
      type: parsedError.type,
      stack: error?.stack,
      url: window.location.href,
      userAgent: navigator.userAgent,
      sessionId: sessionStorage.getItem('edore_session_id')
    };
    
    errorLog.push(errorEntry);
    
    // ТюђТќ░100С╗ХсЂ«сЂ┐С┐ЮТїЂ
    if (errorLog.length > 100) {
      errorLog.splice(0, errorLog.length - 100);
    }
    
    localStorage.setItem('edore_error_log', JSON.stringify(errorLog));
  } catch (storageError) {
    console.warn('сѓесЃЕсЃ╝сЃГсѓ░сЂ«С┐ЮтГўсЂФтц▒ТЋЌ:', storageError);
  }
};

/**
 * сѓесЃЕсЃ╝сѓњсЃГсѓ░сЂФУеўжї▓сЂЎсѓІ
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @param {string} context - сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЪсѓ│сЃ│сЃєсѓГсѓ╣сЃѕ
 * @param {Object} additionalData - У┐йтіасЂ«сЃЄсЃљсЃЃсѓ░ТЃЁта▒
 */
export const logError = (error, context = '', additionalData = {}) => {
  const parsedError = parseError(error);
  
  const logData = {
    timestamp: new Date().toISOString(),
    context,
    errorType: parsedError.type,
    message: parsedError.message,
    originalError: parsedError.originalError,
    additionalData,
    userAgent: navigator.userAgent,
    url: window.location.href
  };

  // сЃГсЃ╝сѓФсЃФсѓ╣сЃѕсЃгсЃ╝сѓИсЂФС┐ЮтГў
  saveErrorToLocalStorage(error, context);

  // жќІуЎ║уњ░тбЃсЂДсЂ»УЕ│у┤░сЂфсЃГсѓ░сѓњтЄ║тіЏ
  if (process.env.NODE_ENV === 'development') {
    console.group(`­Ъџе Error Log - ${context}`);
    console.error('Parsed Error:', parsedError);
    console.error('Original Error:', error);
    console.error('Additional Data:', additionalData);
    console.error('Full Log Data:', logData);
    console.groupEnd();
  }

  // ТюгуЋфуњ░тбЃсЂДсЂ»тцќжЃесѓхсЃ╝сЃЊсѓ╣сЂФсѓесЃЕсЃ╝сѓњжђЂС┐А
  // СЙІ: Sentry, LogRocket, etc.
  if (process.env.NODE_ENV === 'production') {
    // TODO: тцќжЃесѓесЃЕсЃ╝У┐йУиАсѓхсЃ╝сЃЊсѓ╣сЂИсЂ«жђЂС┐А
    console.error('Error:', logData);
  }
};

/**
 * сѓесЃЕсЃ╝сЃЈсЃ│сЃЅсЃфсЃ│сѓ░сЂ«сЃўсЃФсЃЉсЃ╝жќбТЋ░
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @param {string} context - сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЪсѓ│сЃ│сЃєсѓГсѓ╣сЃѕ
 * @param {Object} options - сѓфсЃЌсѓисЃДсЃ│
 * @returns {Object} сѓесЃЕсЃ╝ТЃЁта▒
 */
export const handleError = (error, context = '', options = {}) => {
  const { 
    showAlert = false, 
    logError: shouldLog = true,
    additionalData = {} 
  } = options;

  const parsedError = parseError(error);

  // сѓесЃЕсЃ╝сЃГсѓ░сЂ«Уеўжї▓
  if (shouldLog) {
    logError(error, context, additionalData);
  }

  // сѓбсЃЕсЃ╝сЃѕУАеуц║
  if (showAlert) {
    alert(parsedError.message);
  }

  return parsedError;
};

/**
 * жЮътљїТюЪтЄдуљєсЂ«сѓесЃЕсЃ╝сЃЈсЃ│сЃЅсЃфсЃ│сѓ░сЃЕсЃЃсЃЉсЃ╝
 * @param {Function} asyncFunction - жЮътљїТюЪжќбТЋ░
 * @param {string} context - сѓ│сЃ│сЃєсѓГсѓ╣сЃѕ
 * @param {Object} options - сѓфсЃЌсѓисЃДсЃ│
 * @returns {Function} сЃЕсЃЃсЃЌсЂЋсѓїсЂЪжќбТЋ░
 */
export const withErrorHandling = (asyncFunction, context = '', options = {}) => {
  return async (...args) => {
    try {
      return await asyncFunction(...args);
    } catch (error) {
      const parsedError = handleError(error, context, options);
      
      // сѓесЃЕсЃ╝сѓњтєЇсѓ╣сЃГсЃ╝сЂЎсѓІсЂІсЂЕсЂєсЂІ
      if (options.rethrow !== false) {
        throw parsedError;
      }
      
      return { error: parsedError };
    }
  };
};

/**
 * сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│сѓесЃЕсЃ╝сѓњСйюТѕљ
 * @param {string} message - сѓесЃЕсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИ
 * @param {string} field - сЃЋсѓБсЃ╝сЃФсЃЅтљЇ
 * @returns {Object} сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│сѓесЃЕсЃ╝
 */
export const createValidationError = (message, field = '') => {
  return {
    type: ERROR_TYPES.VALIDATION,
    message,
    field,
    title: ERROR_MESSAGES[ERROR_TYPES.VALIDATION].title
  };
};

/**
 * сЃЇсЃЃсЃѕсЃ»сЃ╝сѓ»сѓесЃЕсЃ╝сЂІсЂЕсЂєсЂІсѓњтѕцт«џ
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @returns {boolean} сЃЇсЃЃсЃѕсЃ»сЃ╝сѓ»сѓесЃЕсЃ╝сЂІсЂЕсЂєсЂІ
 */
export const isNetworkError = (error) => {
  const parsedError = parseError(error);
  return parsedError.type === ERROR_TYPES.NETWORK;
};

/**
 * УфЇУе╝сѓесЃЕсЃ╝сЂІсЂЕсЂєсЂІсѓњтѕцт«џ
 * @param {Error|Object} error - сѓесЃЕсЃ╝сѓфсЃќсѓИсѓДсѓ»сЃѕ
 * @returns {boolean} УфЇУе╝сѓесЃЕсЃ╝сЂІсЂЕсЂєсЂІ
 */
export const isAuthError = (error) => {
  const parsedError = parseError(error);
  return parsedError.type === ERROR_TYPES.AUTHENTICATION;
}; 